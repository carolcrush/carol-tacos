import Head from 'next/head';
import { Container, Select, Button, Divider, Grid } from '@mantine/core';
import { CheckItem } from '../types/items';
import { useMediaQuery } from '@mantine/hooks';
import Router from 'next/router';
import Image from 'next/image';
import useLocalStorageState from 'use-local-storage-state';
import styles from '../styles/check.module.css';

type CheckItemProps = {
  checkItem: CheckItem;
  index: number;
  handleDelete: (index: number) => void;
  onChange: (index: number, count: string) => void;
};

const CheckListItem = ({
  checkItem,
  index,
  handleDelete,
  onChange,
}: CheckItemProps) => {
  const isMobile = useMediaQuery(`(max-width: 576px)`);
  return (
    <Grid
      columns={7}
      style={{
        width: isMobile ? '100%' : '50%',
        textAlign: 'center',
        margin: 'auto',
        marginTop: '20px',
        alignItems: 'center',
      }}
    >
      <Grid.Col span={2}>
        <Image
          src={checkItem.image}
          alt="title image"
          width={isMobile ? 93 : 140}
          height={isMobile ? 63 : 95}
        />
      </Grid.Col>
      <Grid.Col
        span={2}
        style={{
          whiteSpace: 'pre',
        }}
      >
        {checkItem.title}
      </Grid.Col>
      <Grid.Col span={1}>¥{checkItem.price}</Grid.Col>
      <Grid.Col span={1}>
        <Select
          style={{ width: '60px', margin: 'auto' }}
          defaultValue={String(checkItem.count)}
          data={data}
          placeholder="0"
          maxDropdownHeight={100}
          size="xs"
          onChange={(count) => onChange(index, count ?? '')}
        />
      </Grid.Col>
      <Grid.Col span={1}>
        <a onClick={() => handleDelete(index)} className={styles.deleteLink}>
          削除
        </a>
      </Grid.Col>
    </Grid>
  );
};

const CheckListItemMobile = ({
  checkItem,
  index,
  handleDelete,
  onChange,
}: CheckItemProps) => {
  return (
    <Grid
      columns={4}
      style={{
        width: '100%',
        textAlign: 'center',
        margin: 'auto',
        marginTop: '20px',
        alignItems: 'center',
      }}
    >
      <Grid.Col span={1}>
        <Image src={checkItem.image} alt="title image" width={93} height={63} />
      </Grid.Col>
      <Grid.Col
        span={2}
        style={{
          whiteSpace: 'pre',
        }}
      >
        {checkItem.title}
        <div>¥{checkItem.price}</div>
      </Grid.Col>
      <Grid.Col span={1}>
        <Select
          style={{ width: '60px', margin: 'auto', marginBottom: '10px' }}
          defaultValue={String(checkItem.count)}
          data={data}
          placeholder="0"
          maxDropdownHeight={100}
          size="xs"
          onChange={(count) => onChange(index, count ?? '')}
        />
        <a
          onClick={() => handleDelete(index)}
          className={styles.deleteLink}
          style={{ fontSize: '12px' }}
        >
          削除
        </a>
      </Grid.Col>
    </Grid>
  );
};

const createMessage = (checkList: CheckItem[]) => {
  return `
  新しい注文がありました：
${checkList
  .map((order) => `${order.title.replaceAll('\n', ' ')}: ${order.count}`)
  .join('\n')}
  `;
};
const handler = (path: string) => {
  Router.push(path);
};

const data = Array(10)
  .fill(0)
  .map((_, index) => `${index + 1}`);

function CheckList() {
  const [checkList, setCheckList] =
    useLocalStorageState<CheckItem[]>('checkList');

  const isMobile = useMediaQuery(`(max-width: 768px)`);

  const handleDelete = (index: number) => {
    const updatedCheckList = [...(checkList ?? [])];
    updatedCheckList.splice(index, 1);
    setCheckList(updatedCheckList);
  };

  const onChange = (index: number, count: string | null) => {
    if (count !== null) {
      setCheckList((checkList) => {
        const updatedCheckList = [...(checkList ?? [])];
        updatedCheckList[index] = {
          ...updatedCheckList[index],
          count: Number(count),
        };
        return updatedCheckList;
      });
    }
  };
  const calculatedTotalCount = checkList?.reduce(
    (total, item) => total + item.count,
    0,
  );
  const calculatedTotalPrice = checkList?.reduce(
    (total, item) => total + item.price * item.count,
    0,
  );

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="title" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Image
        src="/tacos-bg.jpeg"
        alt=""
        width={isMobile ? 576 : 1500}
        height={isMobile ? 400 : 500}
        style={{
          minWidth: '100%',
          maxWidth: '100%',
          marginTop: '-150px',
          marginBottom: '-100px',
          objectFit: 'cover',
          objectPosition: 'center bottom',
          clipPath: 'inset(30% 0 25% 0)',
        }}
      />
      <Container
        style={{
          width: '100%',
          height: '100px',
          marginTop: '15px',
        }}
      >
        <div
          style={{
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            fontSize: 35,
            fontWeight: 600,
            textAlign: 'center',
          }}
        >
          Carol Tacos 注文カート
          <Button
            radius="xl"
            size="sm"
            color="gray"
            style={{ marginLeft: '30px' }}
            onClick={() => handler('/order')}
          >
            <div style={{ margin: '10px' }}>注文ページに戻る</div>
          </Button>
        </div>
      </Container>
      {checkList
        ?.slice()
        .reverse()
        .map((row, index) =>
          isMobile ? (
            <CheckListItemMobile
              key={row.title}
              checkItem={row}
              index={checkList.length - index - 1}
              handleDelete={handleDelete}
              onChange={onChange}
            />
          ) : (
            <CheckListItem
              key={row.title}
              checkItem={row}
              index={checkList.length - index - 1}
              handleDelete={handleDelete}
              onChange={onChange}
            />
          ),
        )}
      <Divider
        my="sm"
        style={{ width: isMobile ? '100%' : '50%', margin: 'auto' }}
      />
      <Grid
        columns={isMobile ? 4 : 7}
        style={{
          width: isMobile ? '100%' : '50%',
          textAlign: 'center',
          margin: 'auto',
          marginTop: '10px',
          alignItems: 'center',
        }}
      >
        <Grid.Col
          span={isMobile ? 1 : 4}
          style={{
            textAlign: 'right',
            paddingRight: '50px',
            whiteSpace: 'nowrap',
          }}
        >
          合計 {isMobile && `: ${calculatedTotalCount}点`}
        </Grid.Col>
        <Grid.Col span={isMobile ? 2 : 1}>¥{calculatedTotalPrice}</Grid.Col>
        {!isMobile && <Grid.Col span={1}>{calculatedTotalCount}点</Grid.Col>}

        <Grid.Col span={1}>
          <Button
            radius="xl"
            size="sm"
            color="dark"
            onClick={() => {
              if (checkList && checkList.length > 0) {
                handler('/thanks');
                setCheckList([]);
                fetch('/api/slack', {
                  method: 'POST',
                  body: createMessage(checkList),
                });
              }
            }}
            disabled={checkList && checkList.length === 0}
          >
            <div style={{ margin: '10px' }}>確定</div>
          </Button>
        </Grid.Col>
      </Grid>
    </>
  );
}

export default function CheckPage() {
  return (
    <div>
      <CheckList />
    </div>
  );
}
